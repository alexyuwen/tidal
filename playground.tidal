
let
supervibe = s "supervibe" # vowel "u" # legato 4 # lpf 666
supermandolinPluck = s "supermandolin" # vowel "a" # legato 0.8
supermandolinSus = s "supermandolin" # legato 8 # lpf 999
violin = s "violin" # gain 0.88 # vowel "u"
melody1 = n (scale "minor" "[0 1 2 4]*2 . [7 4 2 1]*2") |+ n "ef" # octave "5 6 6 5" # supervibe # pan tri
melody2 = n (scale "minor" $ ply 2 "[0 1 2 -3]*4") |+ n "ef" # octave 5 # supermandolinPluck
chords = n (scale "harmonicMinor" "[2,4,7] [3,4,8] [2,4,7] [1,3,4,6]") |+ n "ef" # octave 4 # violin
sectionA = stack [melody1, melody2]
chorus = stack [chords, slow 4 melody1 # stack [supervibe, supermandolinSus]]
in do
  hush
  setcps 0.32
  setCycle 0
  d3 $ seqPLoop [
    (0, 3, sectionA),
    (3, 6, chorus)
    ]
  d3 $ melody2




scaleList






let
-- hh = "1!16" # s "hc:0" # hpf 5555 # room 0.04 # orbit 1
-- sd = "~ 1 ~ 1" # s "snare:0" # gain 1.2 # hpf 333 # room 0.08 # orbit 2
binaryPat = "t t t t . t t t f . t t f f . t f f f"
vibeNotes = n (scale "minor" "[0 1 2 4]*4") |+ n "ef" # octave (sew (cat [binaryPat, inv $ inside 4 rev binaryPat]) 6 5)
in do
  setcps 0.32
  setCycle 0
  -- d1 $ "hc"
  d2 $ vibeNotes # s "supervibe" # legato 8 # vowel "a" # lpf 666




do
  d1 "hc"
  d2 $ n (segment 24 $ scale "minor" $ floor <$> (range 0 7) (fast (segment 6 $ 1 + sine) $ cosine)) # octave 4 # s "violin"





do
  d1 $ fast 12 $ n 23 # s "bd:23" # gain 1.5 # speed 0.77

do
  d1 $ fast 12 $ s "lt:7" # gain 1.4

let
bd = s "bd:23" # gain 1.5
hh = s "hc:2" # vowel "i"
cp = s "clap:5" # gain 0.9
bdRhythm = "1!4" # bd
bdPolymeterFunc x = inside 2 loopFirst $ fast (20 / x) $ "1"
bdSoloPolymeter = select ((/5) <$> (segment 1 $ irand 6)) [bdPolymeterFunc x | x <- [3, 4, 5, 6, 7, 8]] # bd
bdSolo = sew "t f" bdRhythm bdSoloPolymeter
hhRhythm = "[~ 1 _ 1 _]*4" # hh
hhRhythm2 = "[1 _ 1? 1]*10" # hh # legato 0.4
-- hhRhythm2Reduced changes pattern every cycle: 0 2 1 2
hhRhythm2Reduced = mask (select ((/2) <$> "<0 2 1 2>") ["[f t t t f]*4", "[f t t t t]*4", "[f t t t f . f t t t t]*2"]) hhRhythm2
hhSolo = inside 10 (shuffle 2) $ mask (fastcat ["t", "[t f|t|t]*10"]) hhRhythm2
cpRhythm = sew "[t|t|f]*2" (fast (20 / fast 2 "[2|3|4|6|7|8]") $ "1") ("[~ ~ 1 _ _]*4")
cpRhythmPanned = cpRhythm # pan (slow 2 $ "<0 1>") # cp
cpRhythm2 = "[~@2 1@3] ~ ~ ~" # cp
cpRhythm2Panned = cpRhythm2 # pan "<0 1>" # cp
cpSectionC = mask "f!11 t!9" bdSolo # cp
sectionAFunc randSeed = stack [bdRhythm, hhRhythm, (<~) (randSeed * 4) cpRhythmPanned]
sectionB = stack [bdRhythm, hhSolo, cpRhythm2Panned]
sectionC = stack [bdSolo, hhRhythm2Reduced, cpSectionC]
finalPat randSeed = seqPLoop [
  (0, 5, sectionAFunc randSeed),
  (5, 10, (<~) (randSeed * 2) sectionB),
  (10, 16, (<~) (randSeed * 3) sectionC)
  ]
in do
  hush
  setcps 0.24
  setCycle 4
  -- d4 $ n "0" # s "supervibe" # legato 0.1
  d1 $ finalPat 9


do
  d1 "hc"
  d2 $ fast 4 $ n "[0 1 2 3]?" # s "supervibe" # lpf 999







