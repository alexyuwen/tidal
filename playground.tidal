


let
normalBreak = chop 16 $ loopAt 1 "break:1" # cut 1
fastBreak = hurry 1.5 $ chop 16 $ loopAt 1 "break:1" # cut 1
mixedBreak = randcat [normalBreak, fastBreak]
in do
  d1 $ ur 1 "mixedBreak, cp"
    [
    ("normalBreak", normalBreak),
    ("fastBreak", fastBreak),
    ("mixedBreak", mixedBreak),
    ("cp", "cp")
    ]
    [
    --
    ]
  d2 $ segment 4 $ n 0 # octave 2 # s "organTonewheel0" # gain 1.6
  d3 $ segment 8 $ n "c'min" # octave 5 # s "supermandolin" # legato 0.5 # gain 1.2


do
  d1 $ "cp"
  d2 $ splice 8 (run 8) "break:1"
  -- d2 $ splice 8 (run 4 ++ run 4) "break:1"
  -- d2 $ splice 8 (fastcat [run 4, run 4]) $ loopAt 1 "break:1"
  d2 $ splice 8 "0 1 0 1 [0 1] !" $ loopAt 1 "break:1"


-- Starting point.
do
  d1 $ striate 2 $ loopAt 1 $ s "break:1" # cut 1
  d2 $ "cp"


-- Observe what happens when you move the speed control.
do
  d1 "cp"
  -- d2 $ striate 4 $ loopAt 1 $ s "break:1" # cut 1 * speed "1 2"  -- Gets structure from speed, then striates
  d2 $ (* speed "1 2") $ striate 4 $ loopAt 1 $ s "break:1" # cut 1  -- Gets structure from base pattern, then striates.  Speed applied to each striated bit.
  -- d2 $ (# speed "1 2") $ striate 4 $ loopAt 1 $ s "break:1" # cut 1  -- Same as above.


-- What does not seem to work:
do
  d1 "cp"
  d2 $ (*| speed "1 2") $ striate 4 $ loopAt 1 $ s "break:1" # cut 1 -- Striate, then get structure from speed.
  -- d2 $ striate 4 $ loopAt 1 $ s "break:1" # cut 1 # speed "1 2" -- Gets structure from base pattern, but speed not applied because there's only one event each cycle.







